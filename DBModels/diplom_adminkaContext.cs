// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace OfficeTime.DBModels;

public partial class diplom_adminkaContext : DbContext
{
    public diplom_adminkaContext()
    {
    }

    public diplom_adminkaContext(DbContextOptions<diplom_adminkaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Dismissal> Dismissals { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Holiday> Holidays { get; set; }

    public virtual DbSet<Medical> Medicals { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Password=12345;Username=postgres;Database=diplom_adminka;Host=localhost");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Dismissal>(entity =>
        {
            entity.HasKey(e => e.Empid).HasName("dismissal_pk");

            entity.ToTable("dismissal");

            entity.Property(e => e.Empid)
                .ValueGeneratedNever()
                .HasColumnName("empid");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.Datecreate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datecreate");
            entity.Property(e => e.Isapp)
                .HasDefaultValue(false)
                .HasColumnName("isapp");

            entity.HasOne(d => d.Emp).WithOne(p => p.Dismissal)
                .HasForeignKey<Dismissal>(d => d.Empid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("dismissal_employee_fk");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("employee_pk");

            entity.ToTable("employee");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accessid).HasColumnName("accessid");
            entity.Property(e => e.Datebirth)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datebirth");
            entity.Property(e => e.Datestart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datestart");
            entity.Property(e => e.Fio).HasColumnName("fio");
            entity.Property(e => e.Password)
                .HasColumnType("character varying")
                .HasColumnName("password");
            entity.Property(e => e.Postid).HasColumnName("postid");
            entity.Property(e => e.Telegram)
                .HasColumnType("character varying")
                .HasColumnName("telegram");
            entity.Property(e => e.Yandex)
                .HasColumnType("character varying")
                .HasColumnName("yandex");

            entity.HasOne(d => d.Access).WithMany(p => p.Employees)
                .HasForeignKey(d => d.Accessid)
                .HasConstraintName("employee_role_fk");

            entity.HasOne(d => d.Post).WithMany(p => p.Employees)
                .HasForeignKey(d => d.Postid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("employee_post_fk");
        });

        modelBuilder.Entity<Holiday>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("holiday_pk");

            entity.ToTable("holiday");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('employee_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.Canceled).HasColumnName("canceled");
            entity.Property(e => e.Dateapp)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("dateapp");
            entity.Property(e => e.Datecreate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datecreate");
            entity.Property(e => e.Dateend)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("dateend");
            entity.Property(e => e.Datestart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datestart");
            entity.Property(e => e.Empid)
                .ValueGeneratedOnAdd()
                .HasColumnName("empid");
            entity.Property(e => e.Isdirectorapp).HasColumnName("isdirectorapp");
            entity.Property(e => e.Isleadapp).HasColumnName("isleadapp");
            entity.Property(e => e.Pay).HasColumnName("pay");

            entity.HasOne(d => d.Emp).WithMany(p => p.Holidays)
                .HasForeignKey(d => d.Empid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("holiday_employee_fk");
        });

        modelBuilder.Entity<Medical>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("medical_pk");

            entity.ToTable("medical");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Datecreate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datecreate");
            entity.Property(e => e.Dateend)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("dateend");
            entity.Property(e => e.Datestart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datestart");
            entity.Property(e => e.Empid)
                .ValueGeneratedOnAdd()
                .HasColumnName("empid");

            entity.HasOne(d => d.Emp).WithMany(p => p.Medicals)
                .HasForeignKey(d => d.Empid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("medical_employee_fk");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("post_pk");

            entity.ToTable("post");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Rate).HasColumnName("rate");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("role_pk");

            entity.ToTable("role");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}